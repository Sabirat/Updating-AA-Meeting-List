for onerecord in newlist:

	for pattern in allPatterns:
		if pattern.patString==onerecord.seqstring:
			#break
			target = open("testhtml.html", 'a')
			withtags=initialPage[pattern.start:pattern.end]
			tagsArray=strip_tags(withtags)
			#bingo=RemoveHTMLTags(withtags)


			'''numTime=0
			numAddress=0
			numDay=0
			for taginfo in tagsArray:
				'''if pattern.patString=="tr,$$td,td,td,td,td,td,td,td,$$":
					print "taginfo:"+taginfo'''
				#if numTime==0:
				oldnum=numTime
				numTime+=GetNumberOfTimes(taginfo)
				if numTime and not oldnum==numTime:
					tagsArray.remove(taginfo)
			for taginfo in tagsArray:
				oldnum=numAddress
				numAddress+=GetNumberOfAddresses(taginfo)
				if numAddress and not oldnum==numAddress:
					tagsArray.remove(taginfo)
						
			for taginfo in tagsArray:	
				'''if pattern.patString=="tr,$$td,td,td,td,td,td,td,td,$$":
					print taginfo'''
				numDay+=GetPresenceOfDays(taginfo)
				if numDay:
					tagsArray.remove(taginfo)
			'''if pattern.patString=="tr,$$td,td,td,td,td,td,td,td,$$":
				print "day:"+str(numDay)+"address:"+str(numAddress)+"time:"+str(numTime)
				if numDay==1:
					print initialPage[pattern.start:pattern.end]'''
			if numTime==1 and numAddress==1 and numDay==1:
				target.write(initialPage[pattern.start:pattern.end])
				target.write("<br>")
			else:
				if pattern.patString=="tr,$$td,td,td,td,td,td,td,td,$$":
					print "data:"+initialPage[pattern.start:pattern.end]
					print numAddress
					print numTime
					print numDay'''
								
			'''bingo=withtags
			notime=GetNumberOfTimes(bingo)
			wotime=RemoveTimes(bingo)
			noaddress=GetNumberOfAddresses(wotime)
			print noaddress
			woaddress=RemoveAddresses(wotime)

			if notime==1 and noaddress>0 and GetPresenceOfDays(woaddress)>0 :
						
				target.write(initialPage[pattern.start:pattern.end])
				target.write("<br>")
			elif notime==1 and noaddress==0 and GetPresenceOfDays(woaddress)>=1:
				#print "pattern:"+ pattern.patString	
				#print "address missing"
				FindInfoInParents(pattern.corNode,pattern.start)'''
				#target.write(initialPage[pattern.start:pattern.end])
				#target.write("<br>")
			'''if notime==1 and noaddress==1 and GetPresenceOfDays(bingo)==0:	
				#print initialPage[pattern.start:pattern.end]	
				target.write(initialPage[pattern.start:pattern.end])
				target.write("<br>")'''



























import time ,os ,re
from xml.etree import ElementTree

		
def GetNumberOfTimes(text):
	arr=["1 pm","2 pm","3 pm","4 pm","5 pm","6 pm","7 pm","8 pm","9 pm","10 pm","11 pm","12 pm","1 am","2 am","3 am","4 am","5 am","6 am","7 am","8 am","9 am","10 am","11 am","12 am", "1pm", "2pm", "3pm", "4pm", "5pm", "6pm", "7pm", "8pm", "9pm", "10pm", "11pm", "12pm", "1am", "2am", "3am", "4am", "5am", "6am", "7am", "8am", "9am", "10am", "11am", "12am"]
	text=text.replace("&nbsp;"," ")
	text=text.replace("<"," ")
	text=text.lower()
	line=text
	count=0
	for el in arr:
		if el in line:
			count=count+line.count(el)
	grp=re.finditer('\d{1,2}(:(\d{2})*)\s*(AM|am|PM|pm|a|p)?', line,re.I|re.M)
	
	re.sub('\d{1,2}(:(\d{2})*)\s*(AM|am|PM|pm|a|p)','',line)
	#print line
	#grp2=re.finditer('\d{1,2}\s{0,1}(AM|am|PM|pm)', line,re.I|re.M)

	'''for p in grp:
	    print p.start()'''
	'''for e in grp:
		print text[e.start():e.end()]'''
	return (sum(1 for e in grp) + count)

def RemoveTimes(text):
	arr=["1 pm","2 pm","3 pm","4 pm","5 pm","6 pm","7 pm","8 pm","9 pm","10 pm","11 pm","12 pm","1 am","2 am","3 am","4 am","5 am","6 am","7 am","8 am","9 am","10 am","11 am","12 am", "1pm", "2pm", "3pm", "4pm", "5pm", "6pm", "7pm", "8pm", "9pm", "10pm", "11pm", "12pm", "1am", "2am", "3am", "4am", "5am", "6am", "7am", "8am", "9am", "10am", "11am", "12am"]
	text=text.replace("&nbsp;"," ")
	text=text.replace("<"," ")
	text=text.lower()
	line=text
	count=0
	for el in arr:
		if el in line:
			line=line.replace(el,"")
	grp=re.finditer('\d{1,2}(:(\d{2})*)\s*(AM|am|PM|pm|a|p)?', line,re.I|re.M)	
	re.sub('\d{1,2}(:(\d{2})*)\s*(AM|am|PM|pm|a|p)','',line)
	for e in grp:
		line=line.replace(line[e.start():e.end()],"")
	
	return line


def GetNumberOfAddresses(text):

	line=text
	#grp=re.finditer(r'\d{1,2}(?:(?:am|pm)|(?::\d{1,2})( )(?:am|pm)?)', line,re.I|re.M)
	street_address = re.finditer("\d{1,4}(?:[\w\-]{1,2}) [\w\d\s\,\.\-\']{0,100}(?:street|st|avenue|av|ave|road|rd|highway|hwy|square|sq|trail|trl|drive|dr|court|ct|parkway|pkwy|circle|cir|boulevard|blvd|pike|pk|lane)",line,re.I|re.M)
	
	'''for e in street_address:
		print "address:"+text[e.start():e.end()]'''
	'''for p in street_address:
	    print p.group()'''
	addsum=sum(1 for e in street_address)
	chcount=text.lower().count("Church".lower())
	mapcount=text.lower().count("maps.google.com".lower())+text.lower().count("google.com/maps".lower())
	allsum=addsum#+chcount

	'''if allsum==0 and chcount==1:
		return 1
		
	return allsum'''
	return (addsum or chcount or mapcount)

def GetOneAddress(text):

	line=text
	#grp=re.finditer(r'\d{1,2}(?:(?:am|pm)|(?::\d{1,2})( )(?:am|pm)?)', line,re.I|re.M)
	street_address = re.finditer("\d{1,4}(?:[\w\-]{1,2}) [\w\d\s\,\.\-\']{0,100}(?:street|st|avenue|av|ave|road|rd|highway|hwy|square|sq|trail|trl|drive|dr|court|ct|parkway|pkwy|circle|cir|boulevard|blvd|pike|pk|lane)",line,re.I|re.M)
	
	'''for e in street_address:
		print "address:"+text[e.start():e.end()]'''
	'''for p in street_address:
	    print p.group()'''
	addsum=sum(1 for e in street_address)
	chcount=text.lower().count("Church".lower())
	allsum=addsum#+chcount
	if allsum==0 and chcount==1:
		return 1
		
	return allsum

def RemoveAddresses(text):

	line=text
	#grp=re.finditer(r'\d{1,2}(?:(?:am|pm)|(?::\d{1,2})( )(?:am|pm)?)', line,re.I|re.M)
	street_address = re.finditer('\d{1,4}(?:[\w\-]{1,2}) [\w\d\s\,\.\-\']{0,100}(?:street|st|avenue|av|ave|road|rd|highway|hwy|square|sq|trail|trl|drive|dr|court|ct|parkway|pkwy|circle|cir|boulevard|blvd|pike|pk|lane)',line,re.I|re.M)
	
	for e in street_address:
		line=line.replace(line[e.start():e.end()],"")
	
	return line

'''def GetPresenceOfDays(text):
	text=text.lower()
	#text=text.replace(" ","")
	sumDays=0

	if "Sunday".lower() in text or "Sun".lower() in text:
		sumDays+=1
	if "Monday".lower() in text or "Mon".lower() in text:
		sumDays+=1
	if "Tuesday".lower() in text or "Tue".lower() in text or "Tues".lower() in text:
		sumDays+=1
	if "Wednesday".lower() in text or "Wed".lower() in text:
		sumDays+=1
	if "Thursday".lower() in text or "Thurs".lower() in text  or "Thu".lower() in text:
		sumDays+=1
	if "Friday".lower() in text or "Fri".lower() in text:
		sumDays+=1
	if "Saturday".lower() in text or "Sat".lower() in text:
		sumDays+=1
	return sumDays'''

def GetPresenceOfDays(text):
	text=text.lower()
	#text=text.replace(" ","")
	sumDays=0

	if "Sunday".lower()==text or "Sun".lower()==text:
		sumDays+=1
	if "Monday".lower()==text or "Mon".lower()==text:	
		sumDays+=1
	if "Tuesday".lower()==text or "Tue".lower()==text or "Tues".lower()==text:
		sumDays+=1
	if "Wednesday".lower()==text or "Wed".lower()==text:
		sumDays+=1
	if "Thursday".lower()==text or "Thurs".lower()==text  or "Thu".lower()==text:
		sumDays+=1
	if "Friday".lower()==text or "Fri".lower()==text:
		sumDays+=1
	if "Saturday".lower()==text or "Sat".lower()==text:
		sumDays+=1
	return sumDays
	'''if sumDays==1:
		return 1
	else:
		return 0'''

def RemoveHTMLTags(s):
	tag = False
    	quote = False
	out = ""
	for c in s:
            if c == '<' and not quote:
                tag = True
            elif c == '>' and not quote:
                tag = False
		out = out + " "
            elif (c == '"' or c == "'") and tag:
                quote = not quote
            elif not tag:
                out = out + c
	return out

















	
